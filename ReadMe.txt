Παναγιώτης Μαυρομμάτης - 1115201800115 - sdi1800115
2η εργασία SysPro 2021

Για την εκτέλεση:
Κάνουμε extract το αρχείο και τρέχουμε τις εξής εντολές:
make //Για να γίνει compile το πρόγραμμα, τα εκτελέσιμα βγαίνουν στον φάκελο build
cd build
chmod 777 create_infiles.sh //Συνήθως δεν χρειάζεται! Για να μπορέσουμε να τρέξουμε με ./ το Bash Script
./create_infiles.sh inputfile input_dir 3 //Για να δημιουργηθεί το inputfile
Ώπου inputfile ειναι το inputFile, input_dir είναι ο φάκελος που θα δημιουργηθεί και 3 για numFilesPerDirectory όπως αναφέρεται και στην εκφώνηση
./travelMonitor -m 30 -b 5 -s 100000 -i input_dir //Για να τρέξουμε το πρόγραμμα

Αρχεία ανα φάκελο:
Στο φάκελο build περιέχεται το bash script (create_infiles.sh), 1 αρχείο που περιέχει τα records και 1 έτοιμο input_dir
Τρέχοντας το bashscript δημιουργείται και το input_dir.
Επιπλέον τα εκτελέσιμα του βασικού προγράμματος βγαίνουν σε αυτόν τον φάκελο.
Στον φάκελο examples περιέχεται το αρχείο main.c, που περιέχει την main συνάρτηση για το travelMonitor, και το main2.c που περιέχει την main συνάρτηση για το monitor.
Στον φάκελο src περιέχονται 10 .c αρχεία που περιέχουν συναρτήσεις που χρειάζεται το καθε πρόγραμμα. Πιο συγκεκριμένα στο αρχείο
bloomFunctions.c περιέχεται ο κώδικας που μας δόθηκε στο piazza για το functions χρησιμοποιείται και απο τα 2 προγραμμάτα.
Στο αρχείο bloomfilter.c περιέχονται οι συναρτήσεις απο την πρώτη εργασία για το bloom filter. Το χρησιμοποιεί μόνο το monitor. 
Αντίστοιχα στο skipListFunctions.c περιέχονται οι συναρτήσεις που χρειάζονται για την δημιουργία των skip lists, τις οποίες χρησιμοποιεί μόνο το monitor.
Στο αρχείο monitor_main_questions.c βρίσκονται οι συναρτήσεις που μας ζητείτε να 
υλοποιησουμε απο την εκφώνηση για το κομμάτι του monitor. Όμοια, στο αρχείο travel_main_questions.c βρίσκονται οι συναρτήσεις που μας ζητείτε να 
υλοποιησουμε απο την εκφώνηση για το κομμάτι του travelMonitor. Στο BST.c βρίσκονται βοηθητικές συναρτήσεις για τα binary search trees που έχω υλοποιήσει για τους ιούς
και τις χώρες, το οποίο χρησιμοποιείται απο το monitor. Στο αρχείο StartersAndHelpFunctions.c περιέχονται οι πιο βασικές συναρτήσεις του προγράμματος monitor, όπως το αρχικό διάβασμα
από τα αρχεία, το διάβασμα των εντολών που δίνει ο χρήστης, την δημιουργία των προαναφερόμενων δυαδικών δένδρων και την δημιουργία
της βασικής single linked list. Και αυτό χρησιμοποιείται μόνο απο το monitor.Στο Functions_travelmonitor.c βρίσκονται βοηθητικές συναρτήσεις για τα binary search trees που έχω υλοποιήσει για τους ιούς
και τις χώρες, το οποίο χρησιμοποιείται απο το monitor. Στο αρχείο monitornewfunc.c περιέχονται οι βοηθητικές συναρτήσεις του monitor που αφορούν τα namedpipes.
Στο αρχείο newfunctions_travelmonitor.c περιέχονται περιέχονται οι βοηθητικές συναρτήσεις του travelMonitor που αφορούν τα namedpipes αλλά και το διάβασμα των bloomfilter από το monitor.


Στον φάκελο include περιέχονται τα αντίστοιχα headerFiles των .c αρχείων που αναφέρω παραπάνω. Επίσης περιέχεται και το structs.h, το οποίο περιέχει
defines για το μέγιστο και ελάχιστο βάθος της SkipList, για το μέγιστο μήκος γραμμής, για το πλήθος των hash functions για το bloom filterκαθώς και 
τις δηλώσεις των structs που χρησιμοποιούνται στο monitor. Αντίστοιχα υπάρχει το structs_travel.h για το travelMonitor.

Ζητάω συγγνώμη αν σε κάποια σημεία μου έχουν ξεφύγει comments στα αγγλικά, απλώς στην πρώτη εργασία είχα ξεκινήσει να γράφω στα αγγλικά αλλά στην πορεία το μετάνιωσα.....

Στο ReadMe εξηγώ κυρίως την λογική και τον τρόπο λειτουργίας των προγραμμάτων μου, ενώ στα σχόλια εξηγώ ακριβώς τι κάνω.
Για οποιαδήποτε τυχών απορία στο πρόγραμμα μου, παρακαλώ να ανατρέξετε στα σχόλια που υπάρχουν για κάθε συνάρτηση.

Σχετικά με το Bash Script:
Ξεκινώντας από την "main", δηλαδή από την γραμμή 21, γίνεται έλεγχος για το πλήθος των ορισμάτων
και σε περίπτωση λάθους εμφανίζεται αντίστοιχο μήνυμα και τερματίζει το πρόγραμμα. Γίνεται έλεγχος αν υπάρχει ήδη φάκελος με όνομα input_dir, καθώς επίσης
και αν υπάρχει το txt αρχείο που περιέχει τα records. Έπειτα γίνεται έλεγχος ότι το numFilesPerDirectory>0. Στην συνέχει γίνεται δημιοθργεία του φακέλου input_dir.
Μεσα στον φάκελο δημιουργούντε φάκελοι με τα ονομάτα των χωρών που υπάρχουν στο αρχείο inputfile. Δημιουργόυντε numFilesPerDirectory txt αρχεία και στην συνέχεια
εισχωρούνται records στα txt αρχεία με την μέθοδο round robin. Τέλος γίνεται ένας απλώς έλεγχος ότι έχουν δημιουργηθεί όλα τα txt αρχεία.

Σχετικά με την κύρια εφαρμογή:
Το bufferSize λειτουργεί σίγουρα για όλες τις αποδεκτές τιμές για >2 bytes. Πιστευώ ότι το πρόγραμμα μου λογικά λειτουργεί και για >1 bytes, απλώς δεν είχα τον απαραίτητο χρόνο να το δοκιμάσω.
Ξεκινώντας από την main, γίνεται έλεγχος για το πλήθος των ορισμάτων. Στην συνέχεια διαβάζονται τα περιέχομετα του inputDir και με την μέθοδο round robin χωρίζονται οι χώρες στα monitors. Δημιουργούνται τα named pipes, γίνεται numMonitors φορές
fork και τα παιδία εκτελούν την monitor. 
Στο monitor γίνεται πάλι έλεγχος για το πλήθος των ορισμάτων, διαβάζει τα αρχικά δεδομένα απο το travelmonitor και στην συνέχεια ξεχωρίζει τις χώρες που έχει αναλάβει. Με την βοήθεια των συναρτήσεων από την πρώτη εργασία τα monitor διαβάζουν
αντίστοιχα τα αρχεία τους, γεμίζοντας την αρχική λίστα headCitizen και τα δυαδικά δέντρα. Στη συνέχεια, όπως και στην πρώτη εργασία, δημιουργείται το bloom filter και οι skiplists. Επιπλέον τα monitor ενημερώνουν το travelmonitor για το πλήθος και 
τα ονόματα των ιών που έχουν, έτσι ώστε το travelmonitor να φτιάξει μια συνολική δικιά του βάση. Έπειτα τα monitors στέλνουν τα bloom filter τους και το travelmonitor τα διαβάζει. Ακολουθεί
η κύρια λούπα του προγραμμάτος, όπου ο χρήστης δίνει εντολές. Τέλος, όταν ο χρήστης γράψει /exit, το travel monitor δημιουργεί το logfile του, ενημέρωνει τα monitors ότι τελειώνει. Τα numMonitors αν έχουν λάβει αντιστοιχο σήμα δημιουργούν και αυτα
logfiles. Στην συνέχεια τα monitors ενημερώνουν το travelMonitor ότι είναι έτοιμα να πεθάνουν και το travelMonitor τους στέλνει sigkill και περιμένει να πεθάνουν, πριν ελευθερώσει τον δικό του δεσμευμένο χώρο από την μνήμη.

Θεωρώ ότι το πρόγραμμά μου είναι πλήρες, με εξαίρεση ίσως κάποια ελάχιστα memory leaks (<100 bytes) που προκύπτουν από τις strdup στην συνάρτηση insert_new_citizen_record, από την πρώτη εργασία. Επίσης το μόνο που δεν έχει υλοποιηθεί 
100% είναι όταν ο πατέρα δέχεται ένα  SIGCHLD signal. Κανονικά χρειάζεται γίνει έλεγχος με τα waitpid WNOHANG ποιο παιδί έκλεισε, και για αυτο το παιδί που έκλεισε να ξανατρέξει απο την αρχή ο κώδικας στην αρχή του travelMonitor (fork, execl κλπ).
Θα το έφτιαχνα αλλά δεν πρόλαβα λόγω χρόνου.
